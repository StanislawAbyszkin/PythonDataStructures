class Node:

    def __init__(self, value=None, nextNode=None):
        self.Value = value
        self.NextNode = nextNode

    def __str__(self):
        return str('value: ' + str(self.Value) + ', next -> ' + str(self.NextNode))


class LinkedList:
    def __init__(self):
        self.Head = None
        self.Tail = None
        self.Count = 0

    def __str__(self):
        string_representation = 'List, size(' + str(self.Count) + '):\n'
        current_node = self.Head
        if self.Count == 0:
            string_representation = 'Empty list'
        else:
            while current_node.NextNode is not None:
                string_representation += str(current_node) + '\n'
                current_node = current_node.NextNode
            string_representation += str(current_node) + '\n'
        
        return string_representation

    def __iter__(self):
        # Return the iterable object (self in our case)
        self.currentNode = self.Head
        return self

    def next(self):
        if self.currentNode is not None:
            node_to_return = self.currentNode
            self.currentNode = self.currentNode.NextNode
            return node_to_return
        else:
            raise StopIteration

    def add_to_front(self, node):
        try:
            # Save off the head node so we don't lose it
            headNode = self.Head

            # Point head to the new node
            self.Head = node

            self.Head.NextNode = headNode
            self.Count += 1

            if self.Count == 1:
                self.Tail = self.Head
        except ValueError:
            print 'Something went wrong when adding nodes'

    def add_to_end(self, node):
        try:
            if self.Count == 0:
                self.Head = node
            else:
                self.Tail.NextNode = node
            
            self.Tail = node
            self.Count += 1
        except ValueError:
            print 'Something went wrong when adding node to end of list'

    def remove_last(self):
        if self.Count != 0:
            if self.Count == 1:
                self.Head = None
                self.Tail = None
            else:
                current_node = self.Head
                while current_node.NextNode != self.Tail:
                    current_node = current_node.NextNode

                current_node.NextNode = None
                self.Tail = current_node

            self.Count -= 1


    def remove_first(self):
        if self.Count != 0:
            self.Head = self.Head.NextNode
            self.Count -= 1

            if self.Count == 0:
                self.Tail = None


myList = LinkedList()
myList.add_to_front(Node('start node'))
myList.add_to_end(Node('end node'))
myList.add_to_end(Node('new last node'))
myList.remove_last()

# print myList

print '----- Printing my linked list with iterator ------\n'
for node in myList:  # type: Node
    print node

print '----- Printing my linked list with iterator second time ------\n'
for node in myList: # type: Node
    print node
